from xml.dom.minidom import Document
import xml.dom.minidom
import os


class build_xml:
    def __init__(self):
        self.doc = Document()
        self.path = None
        self.file = None
        self.dir = None
        self.current_element = None  # 当前父节点
        self.name = []  # 储存当前父节点的栈 尾进尾出
        self.mark = 1

    def init_name(self, path):
        self.doc = Document()
        self.path = path
        self.file = None
        self.dir = None
        self.current_element = None  # 当前父节点
        self.name = []  # 储存当前父节点的栈 尾进尾出
        self.mark = 1

    def get_tree_name(self, list_tree):
        # 按照list_tree 递归式创建xml文件的父子标签 和子叶上的值
        list_len = len(list_tree)
        name = list_tree[0]
        if not self.name:
            self.name.append(self.doc)
        self.current_element = self.name[-1]
        # print(name)
        if list_len == 1:
            # 对子叶上数据单独处理
            object_child_text = self.doc.createTextNode(name)
            self.current_element.appendChild(object_child_text)
            self.name.pop()
            self.mark = 0
        else:
            for i in range(list_len):
                if i == 0:
                    object_child = self.doc.createElement(name)
                    self.current_element.appendChild(object_child)
                    self.name.append(object_child)
                if i > 0:
                    self.get_tree_name(list_tree[i])
                if i == list_len - 1:
                    # 每次便利完一个list之后 父节点前移一位，但子叶上的节点除外 否则会移两位
                    if self.mark:
                        self.name.pop()
                    self.mark += 1
                    pass

    def find_node(self, parent, name):
        child_list = parent.childNodes
        for i in child_list:
            a = i.nodeName
            b = i.nodeValue
            if self.deep == self.target_deep and a == '#text' and b == name:
                print(i.nodeName)
                self.target_list.append(i)
            elif i.nodeName != name:
                pass
            elif self.deep > self.target_deep:
                break
            else:
                self.deep += 1
                self.find_node(i, self.remove_list[self.deep])
        self.deep -= 1

    def romove_node(self, list, file_path, num):
        # 删除所有符合list的子节点 向上num个父节点的节点
        self.init_name(file_path)
        self.deep = 0
        self.target_deep = len(list) - 1
        self.target_list = []
        self.remove_list = list
        self.doc = xml.dom.minidom.parse(file_path)
        self.find_node(self.doc, self.remove_list[self.deep])
        if self.target_list:
            for a in self.target_list:
                for i in range(num):
                    a = a.parentNode
                parent = a.parentNode
                parent.removeChild(a)
        self.save_xml()

    def save_xml(self):
        f = open(self.path, 'w')
        self.doc.writexml(f, indent='', newl='', addindent='')
        f.close()

